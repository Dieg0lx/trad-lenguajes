/* The following code was generated by JFlex 1.6.1 */

/*
    PINA GONZALEZ CESAR DANIEL
    PARRA LOPEZ MARIA FERNANDA
    RODRIGUEZ HERRERA JOSE DIEGO
    C#
*/

package Actividad2;

import static Actividad2.Token.Type.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Actividad2/tokens_palabras_reservadas.flex</tt>
 */
public class LexerPalabrasReservadasCSharp {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\56\1\57\1\57\1\55\22\0\1\55\1\50\1\63"+
    "\2\0\1\46\1\53\1\0\1\33\1\34\1\44\1\42\1\40\1\43"+
    "\1\41\1\45\12\61\1\0\1\37\1\52\1\47\1\51\2\0\32\60"+
    "\1\35\1\0\1\36\1\0\1\60\1\0\1\11\1\1\1\7\1\13"+
    "\1\6\1\17\1\21\1\10\1\14\1\22\1\26\1\3\1\15\1\20"+
    "\1\2\1\27\1\60\1\12\1\23\1\5\1\16\1\24\1\25\1\30"+
    "\1\4\1\60\1\31\1\54\1\32\7\0\1\57\u05da\0\12\62\206\0"+
    "\12\62\306\0\12\62\u019c\0\12\62\166\0\12\62\166\0\12\62\166\0"+
    "\12\62\166\0\12\62\166\0\12\62\166\0\12\62\166\0\12\62\166\0"+
    "\12\62\166\0\12\62\140\0\12\62\166\0\12\62\106\0\12\62\u0116\0"+
    "\12\62\106\0\12\62\u0746\0\12\62\46\0\12\62\u012c\0\12\62\200\0"+
    "\12\62\246\0\12\62\6\0\12\62\266\0\12\62\126\0\12\62\206\0"+
    "\12\62\6\0\12\62\u03ce\0\1\57\1\57\u85f6\0\12\62\u02a6\0\12\62"+
    "\46\0\12\62\306\0\12\62\26\0\12\62\126\0\12\62\u0196\0\12\62"+
    "\u5316\0\12\62\u0586\0\12\62\u0bbc\0\12\62\200\0\12\62\74\0\12\62"+
    "\220\0\12\62\u0116\0\12\62\u01d6\0\12\62\u0176\0\12\62\146\0\12\62"+
    "\u0216\0\12\62\u5176\0\12\62\346\0\12\62\u6c74\0\62\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\24\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\1\1\24\3\1\21\25"+
    "\1\26\1\25\1\27\23\25\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\31\1\41\24\25"+
    "\1\42\4\25\1\43\1\25\1\44\16\25\1\45\1\46"+
    "\3\25\1\47\1\25\1\50\4\25\1\51\1\52\11\25"+
    "\1\53\4\25\1\54\7\25\1\55\5\25\1\56\2\25"+
    "\1\57\1\60\2\25\1\61\1\25\1\62\6\25\1\63"+
    "\3\25\1\64\1\65\3\25\1\66\3\25\1\67\3\25"+
    "\1\70\1\25\1\71\2\25\1\72\1\25\1\73\3\25"+
    "\1\74\1\75\1\25\1\76\1\77\1\100\1\101\4\25"+
    "\1\102\4\25\1\103\1\104\1\25\1\105\1\25\1\106"+
    "\1\25\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\25\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\u0444\0\64\0\u0478"+
    "\0\64\0\64\0\64\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c"+
    "\0\u05b0\0\u05e4\0\u0618\0\u0478\0\u064c\0\u0138\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0138\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0444\0\u0478\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\u0e04\0\u0618\0\u064c\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u0138\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\u0138\0\u0138\0\u168c\0\u16c0\0\u16f4\0\u0138\0\u1728"+
    "\0\u0138\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u0138\0\u0138\0\u182c"+
    "\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u0138\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u0138\0\u1ad0\0\u1b04"+
    "\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u0138\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u0138\0\u1d40\0\u1d74\0\u0138\0\u0138"+
    "\0\u1da8\0\u1ddc\0\u0138\0\u1e10\0\u0138\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u0138\0\u1f7c\0\u1fb0\0\u1fe4\0\u0138"+
    "\0\u0138\0\u2018\0\u204c\0\u2080\0\u0138\0\u20b4\0\u20e8\0\u211c"+
    "\0\u0138\0\u2150\0\u2184\0\u21b8\0\u0138\0\u21ec\0\u0138\0\u2220"+
    "\0\u2254\0\u0138\0\u2288\0\u0138\0\u22bc\0\u22f0\0\u2324\0\u0138"+
    "\0\u0138\0\u2358\0\u0138\0\u0138\0\u0138\0\u0138\0\u238c\0\u23c0"+
    "\0\u23f4\0\u2428\0\u0138\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u0138"+
    "\0\u0138\0\u252c\0\u0138\0\u2560\0\u0138\0\u2594\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u25c8\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\7\1\12\1\13\1\14\1\15\1\7\1\16\1\17"+
    "\1\20\1\21\1\7\1\22\1\23\1\24\1\7\1\25"+
    "\1\7\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\52\1\0\1\7"+
    "\1\53\1\54\1\55\65\0\1\56\1\57\1\56\1\60"+
    "\5\56\1\61\16\56\27\0\2\56\3\0\1\62\22\56"+
    "\1\63\4\56\27\0\2\56\3\0\1\56\1\64\26\56"+
    "\27\0\2\56\3\0\13\56\1\65\14\56\27\0\2\56"+
    "\3\0\30\56\27\0\2\56\3\0\2\56\1\66\20\56"+
    "\1\67\3\56\1\70\27\0\2\56\3\0\1\56\1\71"+
    "\5\56\1\72\1\73\17\56\27\0\2\56\3\0\1\74"+
    "\21\56\1\75\5\56\27\0\2\56\3\0\5\56\1\76"+
    "\22\56\27\0\2\56\3\0\1\56\1\77\3\56\1\100"+
    "\22\56\27\0\2\56\3\0\16\56\1\101\1\102\10\56"+
    "\27\0\2\56\3\0\2\56\1\103\10\56\1\104\3\56"+
    "\1\105\2\56\1\106\5\56\27\0\2\56\3\0\1\56"+
    "\1\107\1\110\25\56\27\0\2\56\3\0\5\56\1\111"+
    "\22\56\27\0\2\56\3\0\1\56\1\112\26\56\27\0"+
    "\2\56\3\0\1\113\3\56\1\114\1\115\1\56\1\116"+
    "\14\56\1\117\3\56\27\0\2\56\3\0\1\56\1\120"+
    "\11\56\1\121\14\56\27\0\2\56\3\0\7\56\1\122"+
    "\20\56\27\0\2\56\3\0\11\56\1\123\3\56\1\124"+
    "\12\56\27\0\2\56\63\0\1\125\63\0\2\126\50\0"+
    "\1\127\63\0\1\130\63\0\1\131\63\0\1\132\67\0"+
    "\1\133\64\0\1\134\64\0\2\52\6\0\30\135\10\0"+
    "\1\125\16\0\1\135\1\136\1\126\1\0\56\137\1\0"+
    "\4\137\2\0\1\56\1\140\26\56\27\0\2\56\3\0"+
    "\4\56\1\141\23\56\27\0\2\56\3\0\5\56\1\142"+
    "\22\56\27\0\2\56\3\0\21\56\1\143\6\56\27\0"+
    "\2\56\3\0\5\56\1\144\22\56\27\0\2\56\3\0"+
    "\17\56\1\145\10\56\27\0\2\56\3\0\5\56\1\146"+
    "\22\56\27\0\2\56\3\0\22\56\1\147\5\56\27\0"+
    "\2\56\3\0\5\56\1\150\22\56\27\0\2\56\3\0"+
    "\4\56\1\151\23\56\27\0\2\56\3\0\17\56\1\152"+
    "\10\56\27\0\2\56\3\0\10\56\1\153\17\56\27\0"+
    "\2\56\3\0\22\56\1\154\5\56\27\0\2\56\3\0"+
    "\22\56\1\155\5\56\27\0\2\56\3\0\3\56\1\156"+
    "\24\56\27\0\2\56\3\0\4\56\1\157\3\56\1\160"+
    "\17\56\27\0\2\56\3\0\15\56\1\161\12\56\27\0"+
    "\2\56\3\0\6\56\1\162\7\56\1\163\11\56\27\0"+
    "\2\56\3\0\4\56\1\164\23\56\27\0\2\56\3\0"+
    "\1\56\1\165\26\56\27\0\2\56\3\0\17\56\1\166"+
    "\10\56\27\0\2\56\3\0\22\56\1\167\5\56\27\0"+
    "\2\56\3\0\7\56\1\170\20\56\27\0\2\56\3\0"+
    "\11\56\1\171\16\56\27\0\2\56\3\0\1\56\1\172"+
    "\26\56\27\0\2\56\3\0\24\56\1\173\3\56\27\0"+
    "\2\56\3\0\4\56\1\174\23\56\27\0\2\56\3\0"+
    "\3\56\1\175\24\56\27\0\2\56\3\0\10\56\1\176"+
    "\1\177\16\56\27\0\2\56\3\0\10\56\1\200\17\56"+
    "\27\0\2\56\3\0\1\56\1\201\26\56\27\0\2\56"+
    "\3\0\13\56\1\202\14\56\27\0\2\56\3\0\2\56"+
    "\1\203\10\56\1\204\14\56\27\0\2\56\3\0\11\56"+
    "\1\205\16\56\27\0\2\56\3\0\13\56\1\206\14\56"+
    "\27\0\2\56\3\0\1\56\1\207\11\56\1\210\14\56"+
    "\27\0\2\56\3\0\1\211\27\56\27\0\2\56\3\0"+
    "\30\135\27\0\2\135\3\0\2\56\1\212\25\56\27\0"+
    "\2\56\3\0\5\56\1\213\22\56\27\0\2\56\3\0"+
    "\10\56\1\214\17\56\27\0\2\56\3\0\5\56\1\215"+
    "\22\56\27\0\2\56\3\0\11\56\1\216\16\56\27\0"+
    "\2\56\3\0\20\56\1\217\7\56\27\0\2\56\3\0"+
    "\2\56\1\220\25\56\27\0\2\56\3\0\5\56\1\221"+
    "\22\56\27\0\2\56\3\0\17\56\1\222\10\56\27\0"+
    "\2\56\3\0\5\56\1\223\22\56\27\0\2\56\3\0"+
    "\4\56\1\224\15\56\1\225\5\56\27\0\2\56\3\0"+
    "\11\56\1\226\16\56\27\0\2\56\3\0\5\56\1\227"+
    "\22\56\27\0\2\56\3\0\4\56\1\230\23\56\27\0"+
    "\2\56\3\0\17\56\1\231\10\56\27\0\2\56\3\0"+
    "\15\56\1\232\12\56\27\0\2\56\3\0\12\56\1\233"+
    "\15\56\27\0\2\56\3\0\1\234\27\56\27\0\2\56"+
    "\3\0\13\56\1\235\14\56\27\0\2\56\3\0\10\56"+
    "\1\236\17\56\27\0\2\56\3\0\5\56\1\237\22\56"+
    "\27\0\2\56\3\0\17\56\1\240\10\56\27\0\2\56"+
    "\3\0\4\56\1\241\23\56\27\0\2\56\3\0\10\56"+
    "\1\242\17\56\27\0\2\56\3\0\1\56\1\243\26\56"+
    "\27\0\2\56\3\0\5\56\1\244\22\56\27\0\2\56"+
    "\3\0\10\56\1\245\17\56\27\0\2\56\3\0\1\56"+
    "\1\246\26\56\27\0\2\56\3\0\4\56\1\247\23\56"+
    "\27\0\2\56\3\0\4\56\1\250\23\56\27\0\2\56"+
    "\3\0\13\56\1\251\14\56\27\0\2\56\3\0\2\56"+
    "\1\252\25\56\27\0\2\56\3\0\11\56\1\253\16\56"+
    "\27\0\2\56\3\0\4\56\1\254\23\56\27\0\2\56"+
    "\3\0\10\56\1\255\17\56\27\0\2\56\3\0\12\56"+
    "\1\256\15\56\27\0\2\56\3\0\4\56\1\257\23\56"+
    "\27\0\2\56\3\0\2\56\1\260\25\56\27\0\2\56"+
    "\3\0\4\56\1\261\23\56\27\0\2\56\3\0\23\56"+
    "\1\262\4\56\27\0\2\56\3\0\2\56\1\263\25\56"+
    "\27\0\2\56\3\0\25\56\1\264\2\56\27\0\2\56"+
    "\3\0\6\56\1\265\21\56\27\0\2\56\3\0\11\56"+
    "\1\266\16\56\27\0\2\56\3\0\12\56\1\267\15\56"+
    "\27\0\2\56\3\0\4\56\1\270\23\56\27\0\2\56"+
    "\3\0\11\56\1\271\16\56\27\0\2\56\3\0\13\56"+
    "\1\272\14\56\27\0\2\56\3\0\4\56\1\273\23\56"+
    "\27\0\2\56\3\0\11\56\1\274\16\56\27\0\2\56"+
    "\3\0\6\56\1\275\21\56\27\0\2\56\3\0\11\56"+
    "\1\276\16\56\27\0\2\56\3\0\1\56\1\277\26\56"+
    "\27\0\2\56\3\0\2\56\1\300\25\56\27\0\2\56"+
    "\3\0\14\56\1\301\13\56\27\0\2\56\3\0\15\56"+
    "\1\302\12\56\27\0\2\56\3\0\11\56\1\303\16\56"+
    "\27\0\2\56\3\0\20\56\1\304\7\56\27\0\2\56"+
    "\3\0\16\56\1\305\11\56\27\0\2\56\3\0\11\56"+
    "\1\306\16\56\27\0\2\56\3\0\10\56\1\307\17\56"+
    "\27\0\2\56\3\0\4\56\1\310\23\56\27\0\2\56"+
    "\3\0\5\56\1\311\22\56\27\0\2\56\3\0\13\56"+
    "\1\312\14\56\27\0\2\56\3\0\17\56\1\313\10\56"+
    "\27\0\2\56\3\0\5\56\1\314\22\56\27\0\2\56"+
    "\3\0\4\56\1\315\23\56\27\0\2\56\3\0\6\56"+
    "\1\316\21\56\27\0\2\56\3\0\4\56\1\317\23\56"+
    "\27\0\2\56\3\0\15\56\1\320\12\56\27\0\2\56"+
    "\3\0\5\56\1\321\22\56\27\0\2\56\3\0\5\56"+
    "\1\322\22\56\27\0\2\56\3\0\10\56\1\323\17\56"+
    "\27\0\2\56\3\0\13\56\1\324\14\56\27\0\2\56"+
    "\3\0\4\56\1\325\23\56\27\0\2\56\3\0\13\56"+
    "\1\326\14\56\27\0\2\56\3\0\17\56\1\327\10\56"+
    "\27\0\2\56\3\0\17\56\1\330\10\56\27\0\2\56"+
    "\3\0\10\56\1\331\17\56\27\0\2\56\3\0\17\56"+
    "\1\332\10\56\27\0\2\56\3\0\17\56\1\333\10\56"+
    "\27\0\2\56\3\0\5\56\1\334\22\56\27\0\2\56"+
    "\3\0\10\56\1\335\17\56\27\0\2\56\3\0\2\56"+
    "\1\336\25\56\27\0\2\56\3\0\17\56\1\337\10\56"+
    "\27\0\2\56\3\0\5\56\1\340\22\56\27\0\2\56"+
    "\3\0\4\56\1\341\23\56\27\0\2\56\3\0\6\56"+
    "\1\342\21\56\27\0\2\56\3\0\6\56\1\343\21\56"+
    "\27\0\2\56\3\0\20\56\1\344\7\56\27\0\2\56"+
    "\3\0\12\56\1\345\15\56\27\0\2\56\3\0\7\56"+
    "\1\346\20\56\27\0\2\56\3\0\13\56\1\347\14\56"+
    "\27\0\2\56\3\0\10\56\1\350\17\56\27\0\2\56"+
    "\3\0\6\56\1\351\21\56\27\0\2\56\3\0\4\56"+
    "\1\352\23\56\27\0\2\56\3\0\6\56\1\353\21\56"+
    "\27\0\2\56\3\0\12\56\1\354\15\56\27\0\2\56"+
    "\3\0\15\56\1\355\12\56\27\0\2\56\3\0\6\56"+
    "\1\356\21\56\27\0\2\56\3\0\2\56\1\357\25\56"+
    "\27\0\2\56\3\0\2\56\1\360\25\56\27\0\2\56"+
    "\3\0\4\56\1\361\23\56\27\0\2\56\3\0\10\56"+
    "\1\362\17\56\27\0\2\56\3\0\7\56\1\363\20\56"+
    "\27\0\2\56\3\0\2\56\1\364\25\56\27\0\2\56"+
    "\3\0\2\56\1\365\25\56\27\0\2\56\3\0\4\56"+
    "\1\366\23\56\27\0\2\56\3\0\5\56\1\367\22\56"+
    "\27\0\2\56\3\0\5\56\1\370\22\56\27\0\2\56"+
    "\3\0\5\56\1\371\22\56\27\0\2\56\3\0\4\56"+
    "\1\372\23\56\27\0\2\56\3\0\3\56\1\373\24\56"+
    "\27\0\2\56\3\0\2\56\1\374\25\56\27\0\2\56"+
    "\3\0\5\56\1\375\22\56\27\0\2\56\3\0\5\56"+
    "\1\376\22\56\27\0\2\56\3\0\12\56\1\377\15\56"+
    "\27\0\2\56\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\10\11\1\1\1\11\1\1\3\11"+
    "\63\1\6\11\243\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadasCSharp(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 368) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> ERROR Token no reconocido");
            }
          case 79: break;
          case 2: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de apertura ");                
                return new Token(LLAVE_APERTURA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 80: break;
          case 3: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de cierre ");                
                return new Token(LLAVE_CIERRE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 81: break;
          case 4: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Paréntesis de apertura ");                
                return new Token(PAREN_APERTURA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 82: break;
          case 5: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Paréntesis de cierre ");                
                return new Token(PAREN_CIERRE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 83: break;
          case 6: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de apertura ");                
                return new Token(CORCHETE_APERTURA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 84: break;
          case 7: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de cierre ");                
                return new Token(CORCHETE_CIERRE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 85: break;
          case 8: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto y coma ");                
                return new Token(PUNTO_COMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 86: break;
          case 9: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Coma ");                
                return new Token(COMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 87: break;
          case 10: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto ");                
                return new Token(PUNTO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 88: break;
          case 11: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador suma ");                
                return new Token(OPERADOR_SUMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 89: break;
          case 12: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador resta ");                
                return new Token(OPERADOR_RESTA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 90: break;
          case 13: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador multiplicación ");                
                return new Token(OPERADOR_MULTI, yytext(), (yyline+1), (yycolumn+1));
            }
          case 91: break;
          case 14: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador división ");                
                return new Token(OPERADOR_DIVISION, yytext(), (yyline+1), (yycolumn+1));
            }
          case 92: break;
          case 15: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador módulo ");                
                return new Token(OPERADOR_MODULO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 93: break;
          case 16: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de asignación ");                
                return new Token(ASIGNACION, yytext(), (yyline+1), (yycolumn+1));
            }
          case 94: break;
          case 17: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador lógico NOT ");                
                return new Token(NOT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 95: break;
          case 18: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador mayor que ");                
                return new Token(MAYOR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 96: break;
          case 19: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador menor que ");                
                return new Token(MENOR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 97: break;
          case 20: 
            { /* Ignorar espacios en blanco */
            }
          case 98: break;
          case 21: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> IDENTIFICADOR");
                return new Token(IDENTIFICADOR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 99: break;
          case 22: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Bucle do (ejecuta antes de comprobar condición) ");
    return new Token(DO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 100: break;
          case 23: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Sentencia if (condicional) ");
    return new Token(IF, yytext(), (yyline+1), (yycolumn+1));
            }
          case 101: break;
          case 24: 
            { System.err.println("Error léxico: literal numérico incorrecto '" + yytext() +
                "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
            }
          case 102: break;
          case 25: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> VALOR ENTERO");
                return new Token(VALOR_ENTERO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 103: break;
          case 26: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador igual a ");                
                return new Token(IGUAL_A, yytext(), (yyline+1), (yycolumn+1));
            }
          case 104: break;
          case 27: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador diferente ");                
                return new Token(DIFERENTE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 105: break;
          case 28: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador mayor o igual que ");                
                return new Token(MAYOR_IGUAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 106: break;
          case 29: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador menor o igual que ");                
                return new Token(MENOR_IGUAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 107: break;
          case 30: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador lógico AND ");                
                return new Token(AND, yytext(), (yyline+1), (yycolumn+1));
            }
          case 108: break;
          case 31: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador lógico OR ");                
                return new Token(OR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 109: break;
          case 32: 
            { System.err.println("Error léxico: identificador mal formado '" + yytext() +
                "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
            }
          case 110: break;
          case 33: 
            { System.err.println("Error léxico: cadena mal formada '" + yytext() +
                "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
            }
          case 111: break;
          case 34: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato int ");
    return new Token(INT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 112: break;
          case 35: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Bucle for (iteración controlada) ");
    return new Token(FOR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 113: break;
          case 36: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador new (ocultamiento de miembro heredado) ");
    return new Token(NEW, yytext(), (yyline+1), (yycolumn+1));
            }
          case 114: break;
          case 37: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato bool ");
    return new Token(BOOL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 115: break;
          case 38: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato byte ");
    return new Token(BYTE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 116: break;
          case 39: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato long ");
    return new Token(LONG, yytext(), (yyline+1), (yycolumn+1));
            }
          case 117: break;
          case 40: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Sentencia else (condicional alterno) ");
    return new Token(ELSE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 118: break;
          case 41: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato char ");
    return new Token(CHAR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 119: break;
          case 42: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Sentencia case (opción en switch) ");
    return new Token(CASE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 120: break;
          case 43: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato uint ");
    return new Token(UINT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 121: break;
          case 44: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Instrucción goto (salto a etiqueta) ");
    return new Token(GOTO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 122: break;
          case 45: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo void ");
    return new Token(VOID, yytext(), (yyline+1), (yycolumn+1));
            }
          case 123: break;
          case 46: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Instrucción break (romper ciclo o switch) ");
    return new Token(BREAK, yytext(), (yyline+1), (yycolumn+1));
            }
          case 124: break;
          case 47: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Instrucción yield (retorno en iteradores) ");
    return new Token(YIELD, yytext(), (yyline+1), (yycolumn+1));
            }
          case 125: break;
          case 48: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador event (miembro de evento) ");
    return new Token(EVENT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 126: break;
          case 49: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador const (constante en tiempo de compilación) ");
    return new Token(CONST, yytext(), (yyline+1), (yycolumn+1));
            }
          case 127: break;
          case 50: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador async (método asincrónico) ");
    return new Token(ASYNC, yytext(), (yyline+1), (yycolumn+1));
            }
          case 128: break;
          case 51: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato ulong ");
    return new Token(ULONG, yytext(), (yyline+1), (yycolumn+1));
            }
          case 129: break;
          case 52: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato float ");
    return new Token(FLOAT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 130: break;
          case 53: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato sbyte ");
    return new Token(SBYTE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 131: break;
          case 54: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato short ");
    return new Token(SHORT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 132: break;
          case 55: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Bucle while (condicional) ");
    return new Token(WHILE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 133: break;
          case 56: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo object ");
    return new Token(OBJECT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 134: break;
          case 57: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador extern (método implementado externamente) ");
    return new Token(EXTERN, yytext(), (yyline+1), (yycolumn+1));
            }
          case 135: break;
          case 58: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Instrucción return (devolver valor y salir de método) ");
    return new Token(RETURN, yytext(), (yyline+1), (yycolumn+1));
            }
          case 136: break;
          case 59: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato double ");
    return new Token(DOUBLE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 137: break;
          case 60: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador unsafe (código inseguro con punteros) ");
    return new Token(UNSAFE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 138: break;
          case 61: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato ushort ");
    return new Token(USHORT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 139: break;
          case 62: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador static (miembro o clase estática) ");
    return new Token(STATIC, yytext(), (yyline+1), (yycolumn+1));
            }
          case 140: break;
          case 63: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato string ");
    return new Token(STRING, yytext(), (yyline+1), (yycolumn+1));
            }
          case 141: break;
          case 64: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador sealed (clase no heredable o método no sobreescribible) ");
    return new Token(SEALED, yytext(), (yyline+1), (yycolumn+1));
            }
          case 142: break;
          case 65: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Sentencia switch (selección múltiple) ");
    return new Token(SWITCH, yytext(), (yyline+1), (yycolumn+1));
            }
          case 143: break;
          case 66: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador de acceso public (acceso total) ");
    return new Token(PUBLIC, yytext(), (yyline+1), (yycolumn+1));
            }
          case 144: break;
          case 67: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Tipo de dato decimal ");
    return new Token(DECIMAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 145: break;
          case 68: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Sentencia default (opción por defecto en switch) ");
    return new Token(DEFAULT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 146: break;
          case 69: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Bucle foreach (iteración en colección) ");
    return new Token(FOREACH, yytext(), (yyline+1), (yycolumn+1));
            }
          case 147: break;
          case 70: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador virtual (miembro sobreescribible) ");
    return new Token(VIRTUAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 148: break;
          case 71: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador de acceso private (acceso solo en la clase) ");
    return new Token(PRIVATE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 149: break;
          case 72: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador override (reescribir miembro heredado) ");
    return new Token(OVERRIDE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 150: break;
          case 73: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Instrucción continue (saltar a siguiente iteración) ");
    return new Token(CONTINUE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 151: break;
          case 74: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador abstract (clase o miembro incompleto) ");
    return new Token(ABSTRACT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 152: break;
          case 75: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador readonly (campo asignable solo en constructor) ");
    return new Token(READONLY, yytext(), (yyline+1), (yycolumn+1));
            }
          case 153: break;
          case 76: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador de acceso internal (acceso solo dentro del ensamblado) ");
    return new Token(INTERNAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 154: break;
          case 77: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador volatile (campo que puede cambiar en múltiples hilos) ");
    return new Token(VOLATILE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 155: break;
          case 78: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
    System.out.println(yytext()+" -> Modificador de acceso protected (acceso en clase y derivadas) ");
    return new Token(PROTECTED, yytext(), (yyline+1), (yycolumn+1));
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
