
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 08 19:33:23 CST 2025
//----------------------------------------------------

package Act4;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 08 19:33:23 CST 2025
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\006\003\000\002\006\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\014\011\000\002\020\013\000\002\015\011" +
    "\000\002\016\015\000\002\017\007\000\002\017\006\000" +
    "\002\021\003\000\002\021\004\000\002\022\003\000\002" +
    "\022\003\000\002\023\012\000\002\023\011\000\002\024" +
    "\003\000\002\025\003\000\002\025\005\000\002\026\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\056\003\031\004\034\005\013\006\012\007" +
    "\014\010\042\011\027\012\007\013\005\014\023\015\020" +
    "\016\033\017\024\020\035\021\025\022\004\023\040\024" +
    "\016\031\011\032\022\033\036\035\006\001\002\000\006" +
    "\116\uffc6\121\uffc6\001\002\000\006\116\uffcd\121\uffcd\001" +
    "\002\000\004\121\151\001\002\000\006\116\uffd3\121\uffd3" +
    "\001\002\000\060\002\150\003\031\004\034\005\013\006" +
    "\012\007\014\010\042\011\027\012\007\013\005\014\023" +
    "\015\020\016\033\017\024\020\035\021\025\022\004\023" +
    "\040\024\016\031\011\032\022\033\036\035\006\001\002" +
    "\000\004\112\142\001\002\000\006\116\uffd1\121\uffd1\001" +
    "\002\000\006\116\uffd4\121\uffd4\001\002\000\006\116\uffcf" +
    "\121\uffcf\001\002\000\062\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb" +
    "\111\uffeb\001\002\000\004\112\134\001\002\000\062\002" +
    "\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\031\uffea" +
    "\032\uffea\033\uffea\035\uffea\111\uffea\001\002\000\006\116" +
    "\uffcb\121\uffcb\001\002\000\006\116\131\121\045\001\002" +
    "\000\004\110\120\001\002\000\006\116\uffcc\121\uffcc\001" +
    "\002\000\006\116\uffc9\121\uffc9\001\002\000\006\116\uffc7" +
    "\121\uffc7\001\002\000\062\002\uffe6\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6" +
    "\111\uffe6\001\002\000\006\116\uffce\121\uffce\001\002\000" +
    "\062\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\035\uffe8\111\uffe8\001\002\000" +
    "\004\121\045\001\002\000\062\002\uffe9\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\031\uffe9\032\uffe9\033\uffe9\035" +
    "\uffe9\111\uffe9\001\002\000\006\116\uffca\121\uffca\001\002" +
    "\000\006\116\uffd0\121\uffd0\001\002\000\006\116\uffc8\121" +
    "\uffc8\001\002\000\004\112\043\001\002\000\062\002\uffec" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\031\uffec\032" +
    "\uffec\033\uffec\035\uffec\111\uffec\001\002\000\006\116\uffc5" +
    "\121\uffc5\001\002\000\062\002\uffe7\003\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7" +
    "\111\uffe7\001\002\000\006\116\uffd2\121\uffd2\001\002\000" +
    "\004\121\045\001\002\000\004\116\102\001\002\000\012" +
    "\076\046\113\ufff8\116\ufff8\117\ufff8\001\002\000\020\064" +
    "\050\065\055\066\053\067\056\071\052\121\060\122\057" +
    "\001\002\000\030\070\ufff7\071\ufff7\072\071\073\073\074" +
    "\072\077\ufff7\101\ufff7\102\ufff7\113\ufff7\116\ufff7\117\ufff7" +
    "\001\002\000\030\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074" +
    "\uffc3\077\uffc3\101\uffc3\102\uffc3\113\uffc3\116\uffc3\117\uffc3" +
    "\001\002\000\030\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\077\ufff1\101\ufff1\102\ufff1\113\ufff1\116\ufff1\117\ufff1" +
    "\001\002\000\016\064\050\065\055\066\053\067\056\121" +
    "\060\122\057\001\002\000\030\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\077\uffc1\101\uffc1\102\uffc1\113\uffc1\116" +
    "\uffc1\117\uffc1\001\002\000\022\070\061\071\063\077\064" +
    "\101\065\102\062\113\ufff9\116\ufff9\117\ufff9\001\002\000" +
    "\030\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\077\uffc2" +
    "\101\uffc2\102\uffc2\113\uffc2\116\uffc2\117\uffc2\001\002\000" +
    "\030\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\077\uffc0" +
    "\101\uffc0\102\uffc0\113\uffc0\116\uffc0\117\uffc0\001\002\000" +
    "\030\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\077\uffc4" +
    "\101\uffc4\102\uffc4\113\uffc4\116\uffc4\117\uffc4\001\002\000" +
    "\030\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\077\uffbf" +
    "\101\uffbf\102\uffbf\113\uffbf\116\uffbf\117\uffbf\001\002\000" +
    "\020\064\050\065\055\066\053\067\056\071\052\121\060" +
    "\122\057\001\002\000\020\064\050\065\055\066\053\067" +
    "\056\071\052\121\060\122\057\001\002\000\020\064\050" +
    "\065\055\066\053\067\056\071\052\121\060\122\057\001" +
    "\002\000\020\064\050\065\055\066\053\067\056\071\052" +
    "\121\060\122\057\001\002\000\020\064\050\065\055\066" +
    "\053\067\056\071\052\121\060\122\057\001\002\000\022" +
    "\070\061\071\063\077\ufff4\101\ufff4\102\ufff4\113\ufff4\116" +
    "\ufff4\117\ufff4\001\002\000\022\070\061\071\063\077\ufff2" +
    "\101\ufff2\102\ufff2\113\ufff2\116\ufff2\117\ufff2\001\002\000" +
    "\030\070\ufff5\071\ufff5\072\071\073\073\074\072\077\ufff5" +
    "\101\ufff5\102\ufff5\113\ufff5\116\ufff5\117\ufff5\001\002\000" +
    "\020\064\050\065\055\066\053\067\056\071\052\121\060" +
    "\122\057\001\002\000\020\064\050\065\055\066\053\067" +
    "\056\071\052\121\060\122\057\001\002\000\020\064\050" +
    "\065\055\066\053\067\056\071\052\121\060\122\057\001" +
    "\002\000\030\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef" +
    "\077\uffef\101\uffef\102\uffef\113\uffef\116\uffef\117\uffef\001" +
    "\002\000\030\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee" +
    "\077\uffee\101\uffee\102\uffee\113\uffee\116\uffee\117\uffee\001" +
    "\002\000\030\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\077\ufff0\101\ufff0\102\ufff0\113\ufff0\116\ufff0\117\ufff0\001" +
    "\002\000\022\070\061\071\063\077\ufff3\101\ufff3\102\ufff3" +
    "\113\ufff3\116\ufff3\117\ufff3\001\002\000\030\070\ufff6\071" +
    "\ufff6\072\071\073\073\074\072\077\ufff6\101\ufff6\102\ufff6" +
    "\113\ufff6\116\ufff6\117\ufff6\001\002\000\030\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\077\uffed\101\uffed\102\uffed" +
    "\113\uffed\116\uffed\117\uffed\001\002\000\020\064\050\065" +
    "\055\066\053\067\056\071\052\121\060\122\057\001\002" +
    "\000\016\070\061\071\063\077\064\101\065\102\062\116" +
    "\104\001\002\000\004\121\045\001\002\000\004\113\106" +
    "\001\002\000\004\110\107\001\002\000\056\003\031\004" +
    "\034\005\013\006\012\007\014\010\042\011\027\012\007" +
    "\013\005\014\023\015\020\016\033\017\024\020\035\021" +
    "\025\022\004\023\040\024\016\031\011\032\022\033\036" +
    "\035\006\001\002\000\060\003\031\004\034\005\013\006" +
    "\012\007\014\010\042\011\027\012\007\013\005\014\023" +
    "\015\020\016\033\017\024\020\035\021\025\022\004\023" +
    "\040\024\016\031\011\032\022\033\036\035\006\111\111" +
    "\001\002\000\062\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\111\uffe1" +
    "\001\002\000\062\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\111\uffe5" +
    "\001\002\000\006\116\ufffb\117\116\001\002\000\004\116" +
    "\115\001\002\000\062\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc\111" +
    "\ufffc\001\002\000\004\121\045\001\002\000\004\116\ufffa" +
    "\001\002\000\056\003\031\004\034\005\013\006\012\007" +
    "\014\010\042\011\027\012\007\013\005\014\023\015\020" +
    "\016\033\017\024\020\035\021\025\022\004\023\040\024" +
    "\016\031\011\032\022\033\036\035\006\001\002\000\060" +
    "\003\031\004\034\005\013\006\012\007\014\010\042\011" +
    "\027\012\007\013\005\014\023\015\020\016\033\017\024" +
    "\020\035\021\025\022\004\023\040\024\016\031\011\032" +
    "\022\033\036\035\006\111\122\001\002\000\004\031\123" +
    "\001\002\000\004\112\124\001\002\000\020\064\050\065" +
    "\055\066\053\067\056\071\052\121\060\122\057\001\002" +
    "\000\016\070\061\071\063\077\064\101\065\102\062\113" +
    "\126\001\002\000\004\116\127\001\002\000\062\002\uffe3" +
    "\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\111\uffe3\001\002\000\004\116\133" +
    "\001\002\000\004\003\132\001\002\000\062\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\035\ufffd\111\ufffd\001\002\000\062\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\035\ufffe\111\ufffe\001\002\000\020\064\050\065" +
    "\055\066\053\067\056\071\052\121\060\122\057\001\002" +
    "\000\016\070\061\071\063\077\064\101\065\102\062\113" +
    "\136\001\002\000\004\110\137\001\002\000\056\003\031" +
    "\004\034\005\013\006\012\007\014\010\042\011\027\012" +
    "\007\013\005\014\023\015\020\016\033\017\024\020\035" +
    "\021\025\022\004\023\040\024\016\031\011\032\022\033" +
    "\036\035\006\001\002\000\060\003\031\004\034\005\013" +
    "\006\012\007\014\010\042\011\027\012\007\013\005\014" +
    "\023\015\020\016\033\017\024\020\035\021\025\022\004" +
    "\023\040\024\016\031\011\032\022\033\036\035\006\111" +
    "\141\001\002\000\062\002\uffe4\003\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\111" +
    "\uffe4\001\002\000\020\064\050\065\055\066\053\067\056" +
    "\071\052\121\060\122\057\001\002\000\016\070\061\071" +
    "\063\077\064\101\065\102\062\113\144\001\002\000\004" +
    "\110\145\001\002\000\056\003\031\004\034\005\013\006" +
    "\012\007\014\010\042\011\027\012\007\013\005\014\023" +
    "\015\020\016\033\017\024\020\035\021\025\022\004\023" +
    "\040\024\016\031\011\032\022\033\036\035\006\001\002" +
    "\000\060\003\031\004\034\005\013\006\012\007\014\010" +
    "\042\011\027\012\007\013\005\014\023\015\020\016\033" +
    "\017\024\020\035\021\025\022\004\023\040\024\016\031" +
    "\011\032\022\033\036\035\006\111\147\001\002\000\062" +
    "\002\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\035\uffe2\111\uffe2\001\002\000\004" +
    "\002\001\001\002\000\004\110\152\001\002\000\046\003" +
    "\031\004\034\005\013\006\012\007\014\010\042\011\027" +
    "\012\007\013\005\014\023\015\020\016\033\017\024\020" +
    "\035\021\025\022\004\023\040\111\153\001\002\000\062" +
    "\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\035\uffdf\111\uffdf\001\002\000\046" +
    "\003\031\004\034\005\013\006\012\007\014\010\042\011" +
    "\027\012\007\013\005\014\023\015\020\016\033\017\024" +
    "\020\035\021\025\022\004\023\040\111\202\001\002\000" +
    "\006\116\131\121\161\001\002\000\046\003\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\111\uffdb\001\002\000\046\003\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\111\uffde\001\002\000\046\003\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\111\uffdc\001\002\000\012\076" +
    "\046\112\162\116\ufff8\117\ufff8\001\002\000\044\004\034" +
    "\005\013\006\012\007\014\010\042\011\027\012\007\013" +
    "\005\014\023\015\020\016\033\017\024\020\035\021\025" +
    "\022\004\023\040\113\164\001\002\000\004\121\201\001" +
    "\002\000\004\110\176\001\002\000\004\113\172\001\002" +
    "\000\004\113\uffd8\001\002\000\006\113\uffd7\117\170\001" +
    "\002\000\042\004\034\005\013\006\012\007\014\010\042" +
    "\011\027\012\007\013\005\014\023\015\020\016\033\017" +
    "\024\020\035\021\025\022\004\023\040\001\002\000\004" +
    "\113\uffd6\001\002\000\004\110\173\001\002\000\056\003" +
    "\031\004\034\005\013\006\012\007\014\010\042\011\027" +
    "\012\007\013\005\014\023\015\020\016\033\017\024\020" +
    "\035\021\025\022\004\023\040\024\016\031\011\032\022" +
    "\033\036\035\006\001\002\000\060\003\031\004\034\005" +
    "\013\006\012\007\014\010\042\011\027\012\007\013\005" +
    "\014\023\015\020\016\033\017\024\020\035\021\025\022" +
    "\004\023\040\024\016\031\011\032\022\033\036\035\006" +
    "\111\175\001\002\000\046\003\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\111\uffda\001\002\000\056\003\031\004\034\005\013" +
    "\006\012\007\014\010\042\011\027\012\007\013\005\014" +
    "\023\015\020\016\033\017\024\020\035\021\025\022\004" +
    "\023\040\024\016\031\011\032\022\033\036\035\006\001" +
    "\002\000\060\003\031\004\034\005\013\006\012\007\014" +
    "\010\042\011\027\012\007\013\005\014\023\015\020\016" +
    "\033\017\024\020\035\021\025\022\004\023\040\024\016" +
    "\031\011\032\022\033\036\035\006\111\200\001\002\000" +
    "\046\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\111\uffd9\001\002" +
    "\000\006\113\uffd5\117\uffd5\001\002\000\062\002\uffe0\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\035\uffe0\111\uffe0\001\002\000\046\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\111\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\024\003\036\004\020\012\025\013\007\014" +
    "\014\015\031\016\027\017\040\020\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\036\004\020\012\111\014\014\015\031" +
    "\016\027\017\040\020\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\127\007\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\113\007\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\050\010\053\011\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\050\011\077\001\001\000" +
    "\010\005\050\010\076\011\046\001\001\000\006\005\050" +
    "\011\067\001\001\000\010\005\050\010\066\011\046\001" +
    "\001\000\010\005\050\010\065\011\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\050\011\075\001\001\000\006\005\050\011\074\001\001" +
    "\000\006\005\050\011\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\050\010\102\011" +
    "\046\001\001\000\002\001\001\000\004\007\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\036\004" +
    "\020\012\025\013\107\014\014\015\031\016\027\017\040" +
    "\020\016\001\001\000\022\003\036\004\020\012\111\014" +
    "\014\015\031\016\027\017\040\020\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\116\007\112\001\001" +
    "\000\002\001\001\000\024\003\036\004\020\012\025\013" +
    "\120\014\014\015\031\016\027\017\040\020\016\001\001" +
    "\000\022\003\036\004\020\012\111\014\014\015\031\016" +
    "\027\017\040\020\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\050\010\124\011\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\050\010\134\011\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\036\004\020\012" +
    "\025\013\137\014\014\015\031\016\027\017\040\020\016" +
    "\001\001\000\022\003\036\004\020\012\111\014\014\015" +
    "\031\016\027\017\040\020\016\001\001\000\002\001\001" +
    "\000\010\005\050\010\142\011\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\036\004\020\012\025" +
    "\013\145\014\014\015\031\016\027\017\040\020\016\001" +
    "\001\000\022\003\036\004\020\012\111\014\014\015\031" +
    "\016\027\017\040\020\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\157\004\154" +
    "\021\153\022\156\023\155\001\001\000\002\001\001\000" +
    "\012\003\157\004\154\022\202\023\155\001\001\000\006" +
    "\006\127\007\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\162" +
    "\024\164\025\165\026\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\162\025\170\026\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\036\004\020" +
    "\012\025\013\173\014\014\015\031\016\027\017\040\020" +
    "\016\001\001\000\022\003\036\004\020\012\111\014\014" +
    "\015\031\016\027\017\040\020\016\001\001\000\002\001" +
    "\001\000\024\003\036\004\020\012\025\013\176\014\014" +
    "\015\031\016\027\017\040\020\016\001\001\000\022\003" +
    "\036\004\020\012\111\014\014\015\031\016\027\017\040" +
    "\020\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
    public void report_fatal_error(String mensaje, Object informacion) {
        report_error(mensaje, informacion);
       // System.exit(1); // Detiene la ejecución
    }

   
    public void syntax_error(Symbol token_actual) {
       
        String mensajeError = "Error de sintaxis. ";
        if (token_actual.value != null) {
            mensajeError += "Token inesperado: '" + token_actual.value + "'.";
        }
       
        System.err.println(mensajeError + " Linea: " + (token_actual.left ) + ", Columna: " + (token_actual.right ) );
    }

   
    public void report_error(String mensaje, Object informacion) {
        if (informacion instanceof Symbol) {
            Symbol s = ((Symbol) informacion);
           
            if (s.left >= 0 && s.right >= 0) {
                 syntax_error(s);
                 return;
            }
        }
     
        System.err.println(mensaje);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valor ::= VALOR_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valor ::= VALOR_CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valor ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valor ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor ::= VALOR_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_dato ::= VOID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_dato ::= USHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_dato ::= ULONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_dato ::= UINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_dato ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_dato ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_dato ::= SBYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_dato ::= OBJECT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_dato ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_dato ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_dato ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_dato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_dato ::= BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro ::= tipo_dato IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_parametros ::= parametro COMA lista_parametros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_metodo ::= tipo_dato IDENTIFICADOR PAREN_APERTURA PAREN_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de METODO sin parametros correcta"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_metodo ::= tipo_dato IDENTIFICADOR PAREN_APERTURA parametros PAREN_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de METODO correcta"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_metodo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elemento_clase ::= declaracion_metodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento_clase",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elemento_clase ::= dec_variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elemento_clase",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_clase ::= cuerpo_clase elemento_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_clase ::= elemento_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_clase ::= CLASS IDENTIFICADOR LLAVE_APERTURA LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de CLASE vacia correcta"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_clase",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_clase ::= CLASS IDENTIFICADOR LLAVE_APERTURA cuerpo_clase LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de CLASE correcta"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_clase",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_for ::= FOR PAREN_APERTURA dec_var PUNTO_COMA expresion PUNTO_COMA dec_var PAREN_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_for",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_while ::= WHILE PAREN_APERTURA expresion PAREN_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_while",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_do ::= DO LLAVE_APERTURA sentencias LLAVE_CIERRE WHILE PAREN_APERTURA expresion PAREN_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_do",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_if ::= IF PAREN_APERTURA expresion PAREN_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= sentencia_clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sentencia_do 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= dec_variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // termino ::= OPERADOR_RESTA valor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // termino ::= termino OPERADOR_MODULO termino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // termino ::= termino OPERADOR_DIVISION termino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // termino ::= termino OPERADOR_MULTIPLICACION termino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // termino ::= valor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("termino",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion IGUAL_A expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= expresion OPERADOR_RESTA termino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= expresion OPERADOR_SUMA termino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_var",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_var ::= IDENTIFICADOR ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_var",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_vars ::= dec_var COMA dec_vars 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_vars",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_vars ::= dec_var 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_vars",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_variables ::= error dec_vars PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_variables",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_variables ::= tipo_dato PUNTO_COMA error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_variables",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_variables ::= tipo_dato dec_vars PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de VARIABLE correcta"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_variables",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_variables declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

