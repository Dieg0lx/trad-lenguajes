package Act4;
import java_cup.runtime.*;
import java.io.*;

parser code {:
   
    public void report_fatal_error(String mensaje, Object informacion) {
        report_error(mensaje, informacion);
       // System.exit(1); // Detiene la ejecución
    }

   
    public void syntax_error(Symbol token_actual) {
       
        String mensajeError = "Error de sintaxis. ";
        if (token_actual.value != null) {
            mensajeError += "Token inesperado: '" + token_actual.value + "'.";
        }
       
        System.err.println(mensajeError + " Linea: " + (token_actual.left ) + ", Columna: " + (token_actual.right ) );
    }

   
    public void report_error(String mensaje, Object informacion) {
        if (informacion instanceof Symbol) {
            Symbol s = ((Symbol) informacion);
           
            if (s.left >= 0 && s.right >= 0) {
                 syntax_error(s);
                 return;
            }
        }
     
        System.err.println(mensaje);
    }
:};

/*----------------------------------------------------
    Declaración de Terminales (Tokens)
----------------------------------------------------*/

/* --- Palabras Reservadas --- */
terminal BOOL, BYTE, CHAR, DECIMAL, DOUBLE, FLOAT, INT, LONG, OBJECT;
terminal SBYTE, SHORT, STRING, UINT, ULONG, USHORT, VOID;
terminal IF, ELSE, SWITCH, CASE, DEFAULT, WHILE, DO, FOR, FOREACH;
terminal BREAK, CONTINUE, GOTO, RETURN, YIELD;
terminal PUBLIC, PRIVATE, PROTECTED, INTERNAL, ABSTRACT, ASYNC, CONST;
terminal EVENT, EXTERN, NEW, OVERRIDE, READONLY, SEALED, STATIC;
terminal UNSAFE, VIRTUAL, VOLATILE;
terminal TRUE, FALSE;
terminal VALOR_CADENA;
terminal VALOR_FLOTANTE;

/* --- Operadores --- */
terminal OPERADOR_SUMA, OPERADOR_RESTA, OPERADOR_MULTIPLICACION, OPERADOR_DIVISION, OPERADOR_MODULO, UMENOS;
terminal ASIGNACION;
terminal IGUAL_A, DIFERENTE, MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
terminal AND, OR, NOT;

/* --- Símbolos --- */
terminal LLAVE_APERTURA, LLAVE_CIERRE, PAREN_APERTURA, PAREN_CIERRE;
terminal CORCHETE_APERTURA, CORCHETE_CIERRE, PUNTO_COMA, COMA, PUNTO;

/* --- Expresiones Regulares --- */
terminal IDENTIFICADOR, VALOR_ENTERO;

/*----------------------------------------------------
    Declaración de No Terminales
----------------------------------------------------*/
non terminal declaraciones, dec_variables, tipo_dato, valor, dec_vars, dec_var, expresion, termino;

/*---------------------------------------------------
    Reglas de precedencia
----------------------------------------------------*/

precedence left OPERADOR_SUMA, OPERADOR_RESTA;
precedence left OPERADOR_MULTIPLICACION, OPERADOR_DIVISION, OPERADOR_MODULO;
precedence right UMENOS;

/*----------------------------------------------------
    Reglas Gramaticales
----------------------------------------------------*/
start with declaraciones;

declaraciones::= dec_variables
                | dec_variables declaraciones
                ;

dec_variables::= tipo_dato dec_vars PUNTO_COMA
        {: System.out.println("Declaracion de VARIABLE correcta"); :}
        | tipo_dato PUNTO_COMA error
        | error dec_vars PUNTO_COMA
                ;

dec_vars::= dec_var
            | dec_var COMA dec_vars
            ;

dec_var::= IDENTIFICADOR ASIGNACION expresion
            | IDENTIFICADOR
            ;

expresion::= termino
           | expresion OPERADOR_SUMA termino 
           | expresion OPERADOR_RESTA termino
           ;

termino::= valor
           | termino OPERADOR_MULTIPLICACION termino
           | termino OPERADOR_DIVISION termino
           | termino OPERADOR_MODULO termino
           | OPERADOR_RESTA valor %prec UMENOS
           ;



tipo_dato::= BYTE | INT | DOUBLE | CHAR | BOOL | DECIMAL | FLOAT | LONG | OBJECT
            | SBYTE | SHORT | STRING | UINT | ULONG | USHORT | VOID;

valor::= VALOR_ENTERO
         |TRUE
         |FALSE
         |VALOR_CADENA
         |VALOR_FLOTANTE
         ;